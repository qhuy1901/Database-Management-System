SET SERVEROUTPUT ON;

CREATE TABLE COURSE
(
    CourseNo NUMBER(7)CONSTRAINT COURSE_PK PRIMARY KEY,
    Description VARCHAR(30),
    Cost NUMBER
);

CREATE TABLE STUDENT
(
    StudentID NUMBER(7)CONSTRAINT STUDENT_PK PRIMARY KEY
);

CREATE TABLE CLASS
(
    ClassID NUMBER(7)CONSTRAINT CLASS_PK PRIMARY KEY,
    CourseNo NUMBER(7),
    ClassNo NUMBER(7),
    CONSTRAINT CLASS_CourseNo_FK FOREIGN KEY(CourseNo) REFERENCES COURSE(CourseNo)
);

CREATE TABLE ENROLLMENT
(
    StudentID NUMBER(7),
    ClassID NUMBER(7),
    CONSTRAINT ENROLLMENT_PK PRIMARY KEY(StudentID, ClassID),
    CONSTRAINT ENROLLMENT_StudentID_FK FOREIGN KEY(StudentID)REFERENCES STUDENT(StudentID),
    CONSTRAINT ENROLLMENT_ClassID_FK FOREIGN KEY(ClassID)REFERENCES CLASS(ClassID)
);

INSERT INTO STUDENT VALUES(1);
INSERT INTO STUDENT VALUES(2);
INSERT INTO STUDENT VALUES(3);

INSERT INTO COURSE VALUES(1, 'Course A', 1);
INSERT INTO COURSE VALUES(2, 'Course B', 2);
INSERT INTO COURSE VALUES(3, 'Course C', 3);

INSERT INTO CLASS VALUES(1, 1, 1);
INSERT INTO CLASS VALUES(2, 2, 2);
INSERT INTO CLASS VALUES(3, 3, 3);
INSERT INTO CLASS VALUES(4, 1, 4);
INSERT INTO CLASS VALUES(5, 2, 5);

INSERT INTO ENROLLMENT VALUES(1, 1);
INSERT INTO ENROLLMENT VALUES(1, 2);
INSERT INTO ENROLLMENT VALUES(1, 3);
INSERT INTO ENROLLMENT VALUES(2, 1);
INSERT INTO ENROLLMENT VALUES(3, 4);

CREATE OR REPLACE TRIGGER TRG_CAUA
BEFORE INSERT ON ENROLLMENT
FOR EACH ROW
DECLARE
    V_NUM_CLASS NUMBER;
BEGIN
    SELECT COUNT(CLASSID) INTO V_NUM_CLASS
    FROM ENROLLMENT
    WHERE STUDENTID = :NEW.STUDENTID;
    
    IF(V_NUM_CLASS >=3) THEN
        RAISE_APPLICATION_ERROR(-20122, 'Error: Moi SV khong dang ky qua 3 lop');
    END IF;
END;
--Check
INSERT INTO ENROLLMENT VALUES(1, 4); --Error
INSERT INTO ENROLLMENT VALUES(2, 5); -- Pass

CREATE OR REPLACE PROCEDURE CAUB(V_COURSENO COURSE.COURSENO%TYPE)
AS
    V_COURSE_NAME COURSE.DESCRIPTION%TYPE;
    CURSOR C_CLASS
    IS
        SELECT *
        FROM CLASS
        WHERE COURSENO = V_COURSENO;
    V_NUM_STUDENT NUMBER;
BEGIN
    SELECT DESCRIPTION INTO V_COURSE_NAME
    FROM COURSE
    WHERE COURSENO = V_COURSENO;
    
    DBMS_OUTPUT.PUT_LINE('**Mon hoc: ' || V_COURSE_NAME || '(MaMH: ' || V_COURSENO || ')');
    
    FOR R_CLASS IN C_CLASS
    LOOP
        SELECT COUNT(*) INTO V_NUM_STUDENT
        FROM ENROLLMENT
        WHERE CLASSID = R_CLASS.CLASSID;
        
        DBMS_OUTPUT.PUT_LINE('---Lop: ' || R_CLASS.CLASSID || ' co so luong sinh vien dang ky la: ' || V_NUM_STUDENT);
    END LOOP;
    
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20010, 'Error: Ma mon hoc khong hop le');
END;
---Check
BEGIN
    CAUB(1); --Pass
END; 

BEGIN
    CAUB(10); -- Error
END; 

CREATE OR REPLACE FUNCTION Total_cost_for_student(V_STUID STUDENT.STUDENTID%TYPE) RETURN NUMBER
AS
    V_TOTAL_COST NUMBER;
BEGIN
    SELECT SUM(COST) INTO V_TOTAL_COST
    FROM COURSE CO, CLASS C, ENROLLMENT E
    WHERE CO.COURSENO = C.COURSENO
    AND E.CLASSID = C.CLASSID
    AND E.STUDENTID = V_STUID;
    RETURN V_TOTAL_COST;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
END;
---Check
BEGIN
    DBMS_OUTPUT.PUT_LINE(Total_cost_for_student(1));
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(Total_cost_for_student(10));
END;