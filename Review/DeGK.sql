SET SERVEROUTPUT ON;

CREATE TABLE LOI
(
    MALOI NUMBER(7) CONSTRAINT LOI_PK PRIMARY KEY,
    MUCTIENPHAT NUMBER(7)
);

CREATE TABLE DOITUONG
(
    MADT NUMBER(7) CONSTRAINT DOITUONG_PK PRIMARY KEY,
    HOTEN VARCHAR(30),
    CMND NUMBER(7),
    TONGTIENPHAT NUMBER(7)
); 

CREATE TABLE VIPHAM
(
    MALOI NUMBER(7),
    MADT NUMBER(7),
    THOIDIEMVP DATE,
    NGAYHEN DATE,
    CONSTRAINT VIPHAM_PK PRIMARY KEY(MALOI, MADT),
    CONSTRAINT VIPHAM_MALOI_FK FOREIGN KEY(MALOI)REFERENCES LOI(MALOI),
    CONSTRAINT VIPHAM_MADT_FK FOREIGN KEY(MADT)REFERENCES DOITUONG(MADT)
);

INSERT INTO LOI VALUES(1, 100000);
INSERT INTO LOI VALUES(2, 300000);
INSERT INTO LOI VALUES(3, 700000);
INSERT INTO LOI VALUES(4, 1700000);

INSERT INTO DOITUONG VALUES(1, 'Doi tuong A', 1, 0);
INSERT INTO DOITUONG VALUES(2, 'Doi tuong B', 2, 0);
INSERT INTO DOITUONG VALUES(3, 'Doi tuong C', 3, 0);

INSERT INTO VIPHAM VALUES(1, 1, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('1/2/2021', 'dd/MM/YYYY'));
INSERT INTO VIPHAM VALUES(1, 2, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('2/1/2021', 'dd/MM/YYYY'));
INSERT INTO VIPHAM VALUES(4, 3, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('9/1/2021', 'dd/MM/YYYY'));
INSERT INTO VIPHAM VALUES(2, 1, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('12/1/2021', 'dd/MM/YYYY'));
INSERT INTO VIPHAM VALUES(2, 1, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('12/1/2021', 'dd/MM/YYYY'));
INSERT INTO VIPHAM VALUES(2, 2, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('12/1/2021', 'dd/MM/YYYY'));

CREATE OR REPLACE TRIGGER TRG_CAUA_DE2_VIPHAM
AFTER INSERT OR DELETE OR UPDATE OF MALOI ON VIPHAM
FOR EACH ROW
DECLARE
    V_MUCPHAT_MOI NUMBER;
    V_MUCPHAT_CU NUMBER;
BEGIN
    IF INSERTING THEN
        SELECT MUCTIENPHAT INTO V_MUCPHAT_MOI
        FROM LOI 
        WHERE MALOI = :NEW.MALOI;
        
        UPDATE DOITUONG
        SET TONGTIENPHAT = TONGTIENPHAT + V_MUCPHAT_MOI
        WHERE MADT = :NEW.MADT;
    END IF;
    
    IF DELETING THEN
        SELECT MUCTIENPHAT INTO V_MUCPHAT_CU
        FROM LOI 
        WHERE MALOI = :OLD.MALOI;
        
        UPDATE DOITUONG
        SET TONGTIENPHAT = TONGTIENPHAT - V_MUCPHAT_CU
        WHERE MADT = :OLD.MADT;
    END IF;
    
    IF UPDATING THEN
        SELECT MUCTIENPHAT INTO V_MUCPHAT_MOI
        FROM LOI 
        WHERE MALOI = :NEW.MALOI;
        
        SELECT MUCTIENPHAT INTO V_MUCPHAT_CU
        FROM LOI 
        WHERE MALOI = :OLD.MALOI;
        
        UPDATE DOITUONG
        SET TONGTIENPHAT = TONGTIENPHAT - V_MUCPHAT_CU + V_MUCPHAT_MOI
        WHERE MADT = :NEW.MADT;
    END IF;
END;
--Check
SELECT * FROM VIPHAM;
SELECT * FROM DOITUONG;
DELETE FROM VIPHAM WHERE MADT = 1;

CREATE OR REPLACE TRIGGER TRG_CAUA_DE2_DOITUONG
AFTER UPDATE OF TONGTIENPHAT ON DOITUONG
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    V_TONGTIENPHAT NUMBER;
BEGIN
    SELECT SUM(MUCTIENPHAT)INTO V_TONGTIENPHAT
    FROM VIPHAM VP JOIN LOI L ON L.MALOI = VP.MALOI
    WHERE MADT = :NEW.MADT;

    IF(V_TONGTIENPHAT != :NEW.TONGTIENPHAT)
    THEN
        RAISE_APPLICATION_ERROR(-20015, 'Error: Tong tien phat la tong muc tien phat cua cac loi nguoi do da vi pham');
    END IF;
END;
--Check
SELECT * FROM VIPHAM
SELECT * FROM DOITUONG
DROP TRIGGER TRG_CAUA_DE2_DOITUONG


CREATE OR REPLACE TRIGGER TRG_CAUA_VIPHAM
BEFORE INSERT OR UPDATE ON VIPHAM
FOR EACH ROW
DECLARE
    V_MUCPHAT LOI.MUCTIENPHAT%TYPE;
    V NUMBER;
BEGIN
    SELECT MUCTIENPHAT INTO V_MUCPHAT
    FROM LOI
    WHERE MALOI = :NEW.MALOI;

    IF(V_MUCPHAT > 300000)
    THEN 
        IF(:NEW.NGAYHEN - :NEW.THOIDIEMVP < 10)
        THEN
            RAISE_APPLICATION_ERROR(-20010, 'Error: Vi pham co muc phat lon 300K thi ngay hen sau thoi diem vi pham it nhat 10 ngay');
        END IF;
    END IF;
END;
--Check
INSERT INTO VIPHAM VALUES(4, 1, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('9/1/2021', 'dd/MM/YYYY')); --Error
INSERT INTO VIPHAM VALUES(4, 1, TO_DATE('1/1/2021', 'dd/MM/YYYY'), TO_DATE('11/1/2021', 'dd/MM/YYYY'));
INSERT INTO VIPHAM VALUES(4, 2, TO_DATE('1/2/2021', 'dd/MM/YYYY'), TO_DATE('9/1/2021', 'dd/MM/YYYY')); --Error
INSERT INTO VIPHAM VALUES(4, 2, TO_DATE('1/2/2021', 'dd/MM/YYYY'), TO_DATE('9/10/2021', 'dd/MM/YYYY')); 

CREATE OR REPLACE TRIGGER TRG_CAUA_LOI
BEFORE UPDATE OF MUCTIENPHAT ON LOI
FOR EACH ROW
DECLARE
    CURSOR C_VIPHAM
    IS
        SELECT *
        FROM VIPHAM
        WHERE MALOI = :NEW.MALOI;
BEGIN
    IF(:NEW.MUCTIENPHAT > 300000)
    THEN
        FOR R_VIPHAM IN C_VIPHAM
        LOOP
            IF(R_VIPHAM.NGAYHEN - R_VIPHAM.THOIDIEMVP < 10)
            THEN
                RAISE_APPLICATION_ERROR(-20013,'Error: Vi pham co muc phat lon 300K thi ngay hen sau thoi diem vi pham it nhat 10 ngay');
            END IF;
        END LOOP;
    END IF;
END;
--Check
UPDATE LOI
SET MUCTIENPHAT = 1700000
WHERE MALOI = 4;

CREATE OR REPLACE PROCEDURE CAUB(V_MONTH NUMBER, V_YEAR NUMBER)
AS
    CURSOR C_VIPHAM
    IS
        SELECT DISTINCT(HOTEN), CMND
        FROM VIPHAM VP JOIN DOITUONG DT ON VP.MADT = DT.MADT
        WHERE EXTRACT(MONTH FROM THOIDIEMVP) = V_MONTH
        AND EXTRACT(YEAR FROM THOIDIEMVP) = V_YEAR;
BEGIN
    IF(V_MONTH > 12 OR V_MONTH < 1)
    THEN
        RAISE_APPLICATION_ERROR(-20010, 'Error: Thang khong hop le.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('DS doi tuong vi pham trong thang ' || V_MONTH || ' nam ' || V_YEAR);
        FOR R_VIPHAM IN C_VIPHAM
        LOOP
            DBMS_OUTPUT.PUT_LINE('--' || R_VIPHAM.HOTEN || ' ' || R_VIPHAM.CMND);
        END LOOP;
    END IF;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
            RAISE_APPLICATION_ERROR(-20011, 'Khong co du lieu');
END;
--Check
BEGIN
    CAUB(1,2021);
END;

BEGIN
    CAUB(12,2021);
END;
SELECT * FROM VIPHAM


CREATE OR REPLACE PROCEDURE CAUC(V_MONTH IN NUMBER, V_YEAR IN NUMBER, V_MADT IN DOITUONG.MADT%TYPE, V_TONGLOI OUT NUMBER)
AS
BEGIN
    SELECT COUNT(*) INTO V_TONGLOI
    FROM VIPHAM
    WHERE EXTRACT(MONTH FROM THOIDIEMVP) = V_MONTH
    AND EXTRACT(YEAR FROM THOIDIEMVP) = V_YEAR
    AND MADT = V_MADT;
    
    IF(V_TONGLOI = 0)
    THEN
        DBMS_OUTPUT.PUT_LINE('Doi tuong khong vi pham trong thang ' || V_MONTH || ' nam ' || V_YEAR);
    END IF;
END;
--Check
DECLARE
    X INT;
BEGIN
    CAUC(2,2021, 1, X);
    DBMS_OUTPUT.PUT_LINE(X);
END;


CREATE OR REPLACE PROCEDURE CAUB_DE2(V_YEAR IN NUMBER, V_TENDT OUT VARCHAR, V_SOLOI OUT NUMBER)
AS
BEGIN
    SELECT HOTEN, SOLOI INTO V_TENDT, V_SOLOI
    FROM (  SELECT HOTEN, COUNT(*) SOLOI
            FROM VIPHAM VP JOIN DOITUONG DT ON DT.MADT = VP.MADT
            WHERE EXTRACT(YEAR FROM THOIDIEMVP) = V_YEAR
            GROUP BY VP.MADT, HOTEN
            ORDER BY COUNT(*) DESC)
    WHERE ROWNUM = 1;
END;
--Check
DECLARE
    V_SOLOI NUMBER;
    V_TENDT VARCHAR(30);
BEGIN
    CAUB_DE2(2021, V_TENDT, V_SOLOI);
    DBMS_OUTPUT.PUT_LINE(V_TENDT || ' ' || V_SOLOI);
END;
------------------------
CREATE OR REPLACE PROCEDURE CAUB_DE2(V_YEAR IN NUMBER, V_TENDT OUT VARCHAR, V_SOLOI OUT NUMBER)
AS
    CURSOR C_VIPHAM
    IS 
        SELECT MADT, COUNT(*) SOLOI
        FROM VIPHAM
        WHERE EXTRACT(YEAR FROM THOIDIEMVP) = V_YEAR
        GROUP BY MADT;
    V_MADT DOITUONG.MADT%TYPE;
BEGIN
    V_SOLOI := 0;
    FOR R_VIPHAM IN C_VIPHAM
    LOOP
        IF(V_SOLOI < R_VIPHAM.SOLOI)
        THEN
            V_SOLOI := R_VIPHAM.SOLOI;
            V_MADT := R_VIPHAM.MADT;
        END IF;
    END LOOP;
    
    SELECT HOTEN INTO V_TENDT
    FROM DOITUONG
    WHERE MADT = V_MADT;
END;
--Check
DECLARE
    V_SOLOI NUMBER;
    V_TENDT VARCHAR(30);
BEGIN
    CAUB_DE2(2021, V_TENDT, V_SOLOI);
    DBMS_OUTPUT.PUT_LINE(V_TENDT || ' ' || V_SOLOI);
END;
SET SERVEROUTPUT ON;     

SELECT VP.MADT, COUNT(*)
FROM VIPHAM VP JOIN DOITUONG DT ON DT.MADT = VP.MADT
GROUP BY VP.MADT
HAVING COUNT(*) >= ALL( SELECT COUNT(*)
                        FROM VIPHAM
                        GROUP BY MADT)
                        

CREATE OR REPLACE FUNCTION CAUC_DE2_FNCT (V_YEAR NUMBER) RETURN SYS_REFCURSOR
AS
    C_DOITUONG SYS_REFCURSOR;
BEGIN 
    OPEN C_DOITUONG FOR
        SELECT HOTEN, COUNT(*) SOLOI
        FROM VIPHAM VP JOIN DOITUONG DT ON DT.MADT = VP.MADT
        WHERE EXTRACT(YEAR FROM THOIDIEMVP) = V_YEAR
        GROUP BY VP.MADT, HOTEN
        HAVING COUNT(*) >= ALL( SELECT COUNT(*)
                                FROM VIPHAM
                                WHERE EXTRACT(YEAR FROM THOIDIEMVP) = V_YEAR
                                GROUP BY MADT);
    RETURN C_DOITUONG;
END;
--Check
DECLARE
    C_DOITUONG SYS_REFCURSOR;
BEGIN
    C_DOITUONG := CAUC_DE2_FNCT(2021);
    
    FOR E IN C_DOITUONG
    LOOP
        DBMS_OUTPUT.PUT_LINE(E.HOTEN || ' ' || E.SOLOI);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE update_salary
AS
    CURSOR C_EMPLOYEES 
    IS
        SELECT *
        FROM EMPLOYEES 
BEGIN
    FOR R_EMPLOYEES  IN C_EMPLOYEES 
    LOOP
        IF(SYSDATE - R_EMPLOYEES.HIRE_DATE > 365 * 2)
        THEN
            UPDATE EMPLOYEES 
            SET SALARY = SALARY + 200
            WHERE EMPLOYEE_ID = R_EMPLOYEES.EMPLOYEE_ID;
        END IF;
        
        IF((SYSDATE - R_EMPLOYEES.HIRE_DATE < 365 * 2) AND (SYSDATE - R_EMPLOYEES.HIRE_DATE > 365))
        THEN
            UPDATE EMPLOYEES 
            SET SALARY = SALARY + 100
            WHERE EMPLOYEE_ID = R_EMPLOYEES.EMPLOYEE_ID;
        END IF;
    END LOOP;
END;
        

CREATE OR REPLACE FUNCTION sum_salary(V_DEPT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE) RETURN NUMBER
AS
    V_SUM_SALARY NUMBER;
BEGIN
    SELECT SUM(SALARY) INTO V_SUM_SALARY
    FROM EMPLOYEES E JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    WHERE E.DEPARTMENT_ID = V_DEPT_ID;
    RETURN V_SUM_SALARY;
    
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            RETURN NULL;
END;

CREATE OR REPLACE TRIGGER TRG_JOB_HISTORY
BEFORE INSERT OR UPDATE ON JOB_HISTORY
FOR EACH ROW
DECLARE
BEGIN
    IF(:NEW.START_DATE > :NEW.END_DATE)
    THEN
        RAISE_APPLICATION_ERROR(-20012, 'start date must be earlier than the end date');
    END IF;
END;
        